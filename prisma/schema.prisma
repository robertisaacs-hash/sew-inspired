// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("customer")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  designs  CustomDesign[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String?
  shortDescription String?
  price         Decimal  @db.Decimal(10, 2)
  comparePrice  Decimal? @db.Decimal(10, 2)
  sku           String?  @unique
  barcode       String?
  weight        Decimal? @db.Decimal(8, 2)
  images        String[]
  mockupImages  String[] // Images for design visualization
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  isCustomizable Boolean @default(true) // Can customers add custom designs?
  stock         Int      @default(0)
  minStock      Int      @default(5)
  maxQuantity   Int?
  metaTitle     String?
  metaDescription String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  variants   ProductVariant[]
  orderItems OrderItem[]
  designs    CustomDesign[]

  @@map("products")
}

model ProductVariant {
  id        String  @id @default(cuid())
  name      String  // e.g., "Size", "Color"
  value     String  // e.g., "Large", "Red"
  price     Decimal @db.Decimal(10, 2)
  stock     Int     @default(0)
  sku       String?
  isActive  Boolean @default(true)

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  orderItems OrderItem[]

  @@unique([productId, name, value])
  @@map("product_variants")
}

model CustomDesign {
  id          String   @id @default(cuid())
  name        String
  designData  Json     // Fabric.js canvas data
  imageUrl    String   // Generated preview image
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User?   @relation(fields: [userId], references: [id])
  userId    String?
  product   Product @relation(fields: [productId], references: [id])
  productId String

  orderItems OrderItem[]

  @@map("custom_designs")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  shippingStatus  ShippingStatus @default(NOT_SHIPPED)
  total           Decimal     @db.Decimal(10, 2)
  subtotal        Decimal     @db.Decimal(10, 2)
  tax             Decimal     @db.Decimal(10, 2)
  shipping        Decimal     @db.Decimal(10, 2)
  discount        Decimal?    @db.Decimal(10, 2)
  currency        String      @default("USD")
  paymentIntentId String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Customer information
  customerEmail   String
  customerPhone   String?

  // Billing address
  billingName     String
  billingAddress1 String
  billingAddress2 String?
  billingCity     String
  billingState    String
  billingZip      String
  billingCountry  String

  // Shipping address
  shippingName     String
  shippingAddress1 String
  shippingAddress2 String?
  shippingCity     String
  shippingState    String
  shippingZip      String
  shippingCountry  String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id            String  @id @default(cuid())
  quantity      Int
  price         Decimal @db.Decimal(10, 2)
  total         Decimal @db.Decimal(10, 2)
  
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?

  customDesign   CustomDesign? @relation(fields: [customDesignId], references: [id])
  customDesignId String?

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ShippingStatus {
  NOT_SHIPPED
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
}